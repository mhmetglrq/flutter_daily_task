// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_daily_task/test/bloc_test/auth_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:flutter_daily_task/core/resources/data_state.dart' as _i2;
import 'package:flutter_daily_task/features/dailyTask/domain/entities/user.dart'
    as _i6;
import 'package:flutter_daily_task/features/dailyTask/domain/usecases/auth/get_user_usecase.dart'
    as _i7;
import 'package:flutter_daily_task/features/dailyTask/domain/usecases/auth/sign_in_usecase.dart'
    as _i3;
import 'package:flutter_daily_task/features/dailyTask/domain/usecases/auth/sign_out_usecase.dart'
    as _i8;
import 'package:flutter_daily_task/features/dailyTask/domain/usecases/auth/sign_up_usecase.dart'
    as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeDataState_0<T> extends _i1.SmartFake implements _i2.DataState<T> {
  _FakeDataState_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [SignInUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignInUseCase extends _i1.Mock implements _i3.SignInUseCase {
  MockSignInUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<void>> call({_i3.SignInUseCaseParams? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i4.Future<_i2.DataState<void>>.value(_FakeDataState_0<void>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i4.Future<_i2.DataState<void>>);
}

/// A class which mocks [SignUpUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignUpUseCase extends _i1.Mock implements _i5.SignUpUseCase {
  MockSignUpUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<_i6.UserEntity>> call(
          {_i5.SignUpCaseParams? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i4.Future<_i2.DataState<_i6.UserEntity>>.value(
            _FakeDataState_0<_i6.UserEntity>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i4.Future<_i2.DataState<_i6.UserEntity>>);
}

/// A class which mocks [GetUserUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetUserUseCase extends _i1.Mock implements _i7.GetUserUseCase {
  MockGetUserUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<_i6.UserEntity>> call({dynamic params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue: _i4.Future<_i2.DataState<_i6.UserEntity>>.value(
            _FakeDataState_0<_i6.UserEntity>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i4.Future<_i2.DataState<_i6.UserEntity>>);
}

/// A class which mocks [SignOutUseCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockSignOutUseCase extends _i1.Mock implements _i8.SignOutUseCase {
  MockSignOutUseCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.DataState<void>> call({_i8.SignOutUsecaseParams? params}) =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
          {#params: params},
        ),
        returnValue:
            _i4.Future<_i2.DataState<void>>.value(_FakeDataState_0<void>(
          this,
          Invocation.method(
            #call,
            [],
            {#params: params},
          ),
        )),
      ) as _i4.Future<_i2.DataState<void>>);
}

/// A class which mocks [UserEntity].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserEntity extends _i1.Mock implements _i6.UserEntity {
  MockUserEntity() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<Object?> get props => (super.noSuchMethod(
        Invocation.getter(#props),
        returnValue: <Object?>[],
      ) as List<Object?>);
}
